#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import sys
import platform
import argparse

from nn4omtf.network import OMTFNN, OMTFNNStorage, OMTFRunner
from nn4omtf.dataset import OMTFDataset

desc="""
Command line tools for networks training.
"""

VERBOSE = False

class ACTION:
    TRAIN = "train"
    TEST = "test"


def vp(s):
    global VERBOSE
    if VERBOSE:
        print(s)


def get_matching_nets(target, regexp):
    nets = []
    if OMTFNN.is_valid_object(target):
        net = OMTFNN.load(target)
        if net.name_matches(regexp):
            nets.append(net)
    elif OMTFNNStorage.is_valid_object(target):
        store = OMTFNNStorage.load(target)
        nets = store.get_by_name(regexp)
    s = "".join([(n.name + ",") for n in nets])
    vp("Loaded networks matching " + regexp + ": " + s[:-1])
    return nets


def run(action, dataset_name, target_list, **kw):
    vp("Loading dataset from: %s" % dataset_name)
    dataset = OMTFDataset.load(dataset_name)
    models = []
    for target in target_list:
        vp("Getting models from: %s" % target)
        nets = get_matching_nets(target, kw['filter'])
        models += nets
    if action == ACTION.TEST:
        res = OMTFRunner.test_many_models(dataset, models, **kw)
    else:
        for model in models:
            runner = OMTFRunner(dataset, model, **kw)
            runner.train()


def take_action(action, **kw):
    dataset_name = kw['dataset']
    target_list = kw['target']
    del kw['target']
    del kw['dataset']
    run(action, dataset_name, target_list, **kw)
    

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("-v", "--verbose", action="store_true", 
        help="Get more info!")
    parser.add_argument("--sess_prefix", metavar="suff", default="",
        help="Prefix appended to default session name")
    parser.add_argument("--logdir", metavar="path", 
        help="Location of training summaries for TensorBoard")
    parser.add_argument("--batch_size", type=int, default=1000, 
        metavar="size", help="Size of batch used")
    parser.add_argument("--epochs", type=int, default=1, metavar="N", 
        help="Number of epochs for each model")
    parser.add_argument("--steps", type=int, default=-1, metavar="K", 
        help=("Number of training steps."
              + "Default (K=-1) setup is untill end of dataset"))
    parser.add_argument("--shuffle", action="store_true",help="Shuffle batch")
    parser.add_argument("--filter", default=".*", metavar="regexp", 
        help="Regexp used for matching model names")
    parser.add_argument("--learning_rate", type=float, default=1e-3, 
        help="Learning rate parameter", metavar="lr")
    parser.add_argument("--test", action="store_true",
            help="Test all models instead of training")
    parser.add_argument("dataset", help="Dataset location")
    parser.add_argument("target", nargs="+", help="List of target to train or test")

    FLAGS, unparsed = parser.parse_known_args()
    
    VERBOSE = FLAGS.verbose
    action = ACTION.TEST if FLAGS.test else ACTION.TRAIN
    del FLAGS.test
    take_action(action, **vars(FLAGS))
