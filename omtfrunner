#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import sys
import platform
import argparse

from nn4omtf.network import OMTFNN, OMTFNNStorage, OMTFRunner
from nn4omtf.dataset import OMTFDataset

desc="""
Command line tools for training and testing your networks.
"""

class ACTION:
    TRAIN = "train"
    TEST = "test"


def vp(s):
    global VERBOSE
    if VERBOSE > 0:
        print(s)


def get_matching_nets(target, regexp):
    nets = []
    if OMTFNN.is_valid_object(target):
        net = OMTFNN.load(target)
        if net.name_matches(regexp):
            nets.append(net)
    elif OMTFNNStorage.is_valid_object(target):
        store = OMTFNNStorage.load(target)
        nets = store.get_by_name(regexp)
    s = ", ".join([n.name for n in nets])
    vp("Loaded networks matching " + regexp + ": " + s)
    return nets


def run(action, dataset_name, target_list, regexp, **kw):
    vp("Loading dataset from: %s" % dataset_name)
    dataset = OMTFDataset.load(dataset_name)
    models = []
    for target in target_list:
        vp("Getting models from: %s" % target)
        nets = get_matching_nets(target, regexp)
        models += nets

    if action == ACTION.TEST:
        OMTFRunner.test_many_models(dataset, models, **kw)
    else:
        for model in models:
            runner = OMTFRunner(dataset, model, **kw)
            runner.train()


def take_action(action, **kw):
    dataset_name = kw['dataset']
    target_list = kw['target']
    regexp = kw['filter']
    del kw['target']
    del kw['dataset']
    del kw['filter']
    run(action, dataset_name, target_list, regexp, **kw)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=desc) 
    subparsers = parser.add_subparsers(title="Actions", 
            description="Actions to perform", dest="action")
    train = subparsers.add_parser(ACTION.TRAIN, help="Neural network gym")
    test = subparsers.add_parser(ACTION.TEST, help="Test your network and get some useful statistics.")
    
    # ===== TRAIN
    train.add_argument("-v", "--verbose", action="count", default=0,
            help="Increase verbosity level")
    train.add_argument("-p", "--sess_prefix", metavar="PREF", default="",
        help="Prefix appended to default session name")
    train.add_argument("-l", "--log", metavar="OPT", default="none", 
            choices=['none', 'txt', 'tb', 'both'], help="Logging options")
    train.add_argument("-o", "--logdir", metavar="DIR", default=".", 
        help="Location of logs.")
    train.add_argument("-b", "--batch_size", type=int, default=1000, 
            metavar="SIZE", help="Size of batch used for training (def: 1000)")
    train.add_argument("-e", "--epochs", type=int, default=1, metavar="N", 
        help="Number of training epochs for each model")
    train.add_argument("-s", "--steps", type=int, default=-1, metavar="K", 
        help=("Number of training steps. Default (K = -1) setup means \
                read untill end of dataset"))
    train.add_argument("-u", "--shuffle", action="store_true", help="Shuffle batch")
    train.add_argument("-f", "--filter", default=".*", metavar="REGEXP", 
        help="Regexp used for matching model names")
    train.add_argument("-r", "--learning_rate", type=float, default=1e-3, 
            help="Learning rate parameter (defatult: 0.001)", metavar="LR")
    train.add_argument("-i", "--shiftval", default=600, type=int, 
            metavar="VAL", help="Shift signal value in HITS array")
    train.add_argument("-n", "--nullval", default=0, type=int, metavar="VAL",
            help="Remap value indicating no signal in HITS array")
    train.add_argument("-a", "--acc_ival", default=1000, type=int, metavar="N",
            help="Evaluate accuracy every N steps of training.")
    train.add_argument("--debug", action="store_true",
            help="Enter debuger mode")
    train.add_argument("--plot_online", action="store_true",
            help="Plot training phase results online. `--log txt` must be set.")
    train.add_argument("-lim", "--limit_valid_examples", type=int, metavar="N",
            help="Limit number of examples in `valid` phase. This can\
                    shorten training if `valid` dataset is big")
    train.add_argument("-d", "--detect_no_signal", metavar="THRESHOLD",
            help="Map `no signal` states onto special `NOT KNOWN` \
                    if MEAN(HITS) >= TRESHOLD. Mapping is done before \
                    transformation.", type=float)
    train.add_argument("dataset", help="Dataset location")
    train.add_argument("target", nargs="+", help="List of target to train")

    # ===== TEST
    test.add_argument("dataset", help="Dataset location")
    test.add_argument("target", nargs="+", help="List of target to test")
    test.add_argument("-v", "--verbose", action="count", default=0,
            help="Increase verbosity level")
    test.add_argument("--debug", action="store_true",
            help="Enter debuger mode")
    test.add_argument("-p", "--sess_prefix", metavar="PREF", default="",
        help="Prefix appended to default session name")
    test.add_argument("-l", "--logdir", metavar="DIR", default=".", 
            help="Logs and statistics directory. (default: `.`)")
    test.add_argument("--prob_dist", action="store_true", default=False,
            help="Prepare probability distributions of outputs.")
    test.add_argument("--activation_curves", action="store_true", default=False,
            help="Collect statistics and generate activation curves.")
    test.add_argument("--save_answers", action="store_true", default=False,
            help="Save all collected answers in `*.npz` file.")
    test.add_argument("--omtf_comparsion", action="store_true",
            help="Collect NN and OMTF statistics and generate full comparsion.")
    test.add_argument("-lim", "--limit_test_examples", type=int, metavar="N",
            help="Limit number of examples in `test` phase.")
    test.add_argument("-d", "--detect_no_signal", metavar="THRESHOLD",
            help="Map `no signal` states onto special `NOT KNOWN` \
                    if MEAN(HITS) >= TRESHOLD. Mapping is done before \
                    transformation.", type=float)
    test.add_argument("-f", "--filter", default=".*", metavar="REGEXP", 
        help="Regexp used for matching model names")
    FLAGS, unparsed = parser.parse_known_args()
    if FLAGS.action is None:
        parser.print_help()
    else:
        VERBOSE = FLAGS.verbose
        action = FLAGS.action
        del FLAGS.action
        take_action(action, **vars(FLAGS))
