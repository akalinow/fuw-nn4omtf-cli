#!/usr/bin/env python3.6
# -*- coding: utf-8 -*- 

import sys
import platform
import argparse
import os
import time

import nn4omtf
#from nn4omtf.network import OMTFNN, OMTFNNStorage


desc="""
Command line tools for nn4omtf.
This script handles operations on datasets.
"""


class ACTION:
    ROOT2NUMPY = "root2np"
    CREATE = "create"
    SHOW = "show"


def show_summary(path):
    pass


def create_dataset(name, flist, dest):
    pass
    

def convert(flist, dest, verbose):
    # I know... Importing here is not beautiful but...
    if verbose:
        print("Importing ROOT's stuff...")
    nn4omtf.import_root_utils()
    if verbose:
        print("Creating directory: " + dest)
    os.makedirs(dest, exist_ok=True)
    
    total = len(flist)
    cnt = 1
    time_start = time.time()
    time_last = time_start
    if verbose:
        print("Starting conversion of {} files".format(total))
        for f in flist:
            print("> " + f)

    for f in flist:
        if verbose:
            print("Converting {} of {}: {}".format(cnt, total, f))
        data = nn4omtf.root_utils.load_root_dict(f)
        name = data[1]['name']
        sign = data[1]['sign']
        pt_code = data[1]['val']
        x = nn4omtf.root_utils.root_to_numpy(name, sign, pt_code, data[0])
        path = os.path.join(dest, "{}_{}_{}.npz".format(name, sign, pt_code))
        if verbose:
            print("Saving converted data as " + path)
        nn4omtf.utils.save_dict_as_npz(path, **x)
        now = time.time()
        if verbose:
            print("Done in %.2f sec." % (now-time_last))
            print("Elapsed from start: {}' {}''".format(int((now - time_start) // 60), int(now - time_start) % 60))
        cnt += 1
    if verbose:
        print("Conversion finished!")



def take_action(action, FLAGS):
    if action == ACTION.SHOW:
        show_summary(FLAGS.dir)
    elif action == ACTION.CREATE:
        create_dataset(FLAGS.name, FLAGS.file, FLAGS.dest)
    elif action == ACTION.ROOT2NUMPY:
        convert(FLAGS.data, FLAGS.dest, FLAGS.verbose)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=desc)
    subparsers = parser.add_subparsers(title="Actions", description="Actions to perform", dest="action")

    show = subparsers.add_parser(ACTION.SHOW, help="Look up for dataset object and show summary.")
    show.add_argument("dir", nargs="?", default=".", help="Dataset object directory")

    create = subparsers.add_parser(ACTION.CREATE, help="Create new dataset from *.npz files.")
    create.add_argument("name", help="Dataset name")
    create.add_argument("dest", help="Destination path")
    create.add_argument("file", nargs="+", help="*.npz files which should be taken to dataset")
    
    r2n = subparsers.add_parser(ACTION.ROOT2NUMPY, help="Convert ROOT datasets to Numpy arrays.")
    r2n.add_argument("-v", "--verbose", action="store_true")
    r2n.add_argument("dest", help="Destination directory")
    r2n.add_argument("data", nargs="+", help="Source directories with ROOT datasets.")
    
    FLAGS, unparsed = parser.parse_known_args()
    
    if FLAGS.action is None:
        parser.print_help()
    else:
        take_action(FLAGS.action, FLAGS)
