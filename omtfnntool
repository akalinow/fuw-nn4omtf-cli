#!/usr/bin/env python3
# -*- coding: utf-8 -*- 

import sys
import os
import platform
import argparse

from nn4omtf.network import OMTFNN, OMTFNNStorage


desc="""
Command line tools for nn4omtf.
This script handles a few basic (and most frequent) operations
on networks and storages like displaying summaries, creating,
deleting, moving.
"""

class ACTION:
    SHOW = "show"
    STATS = "stats"
    NETWORK = "network"
    STORAGE = "storage"
    MOVE = "move"
    DELETE = "delete"


def show_summary(paths):
    if len(paths) == 0:
        paths = ["."]
    
    for path in paths:
        if OMTFNN.is_valid_object(path):
            net = OMTFNN.load(path)
            print(net)
        elif OMTFNNStorage.is_valid_object(path):
            store = OMTFNNStorage.load(path)
            print(store)
        else:
            print("Sorry! No OMTFNN nor OMTFNNStorage object in '%s'" % path)
            break


def create_network(name, path, builder_file):
    if OMTFNNStorage.is_valid_object(path):
        store = OMTFNNStorage.load(path)
        store.add_new_network_with_builder_file(name, builder_file)
        store.save()
    else:
        OMTFNN.create_with_builder_file(name=name, path=path, builder_file=builder_file)


def create_storage(name, path):
    store = OMTFNNStorage(name, path)
    store.save()


def move(src, dest):
    if OMTFNN.is_valid_object(path):
        parent = os.path.dirname(path)
        if OMTFNNStorage.is_valid_object(parent):
            # delete nn
            pass
        else:
            net = OMTFNN.load(path)
            net.move(dest)

    elif OMTFNNStorage.is_valid_object(path):
        shutil.move(path, dest)
    else:
        print("Sorry! No OMTFNN nor OMTFNNStorage object in '%s'" % dir)


def delete(path):
    if OMTFNN.is_valid_object(path):
        parent = os.path.dirname(path)
        if OMTFNNStorage.is_valid_object(parent):
            # delete nn
            pass
        else:
            shutil.rmtree(path)
    elif OMTFNNStorage.is_valid_object(path):
        shutil.rmtree(path)
    else:
        print("Sorry! No OMTFNN nor OMTFNNStorage object in '%s'" % dir)


def stats_list_matched(stats):
    print("Listing matched files:")
    for name, _, c in stats:
        print("name: %s, stat files: %d" %(name, c))

def stats_show_matched(net, stats, i):
    print("Showing matched statistics:")
    for name, _, c in stats:
        objs = net.get_statistics_objs(name)
        for idx, obj in objs:
            if i is None or i == idx:
                print("=============== [%d]" % idx)
                print(obj)

def stats_act_curve(net, stats, pt_tresh, save_path, i):
    if i is None:
        print("Please specify statistics file index!")
        exit(1)
    for name, _, c in stats:
        objs = net.get_statistics_objs(name)
        for idx, obj in objs:
            if i is None or i == idx:
                obj.act_curve(pt_tresh, save_path)


def statistics(netname, regexp):
    print(FLAGS.__dict__)
    if not OMTFNN.is_valid_object(netname):
        print("%s in not valid OMTFNN object!" % netname)
        exit(1)
    net = OMTFNN.load(netname)
    stats = net.match_statistics(regexp)
    i = FLAGS.i

    if FLAGS.show:
        stats_show_matched(net, stats, i)

    elif FLAGS.activation_curve is not None:
        show_list = False
        path = None
        if FLAGS.save is not None:
            path = FLAGS.save
            if not os.path.exists(path):
                print("`%s` doesn't exist!" % path)
                exit(1)
        stats_act_curve(net, stats, FLAGS.activation_curve, path, i)
    else:
        stats_list_matched(stats)


def take_action(action, FLAGS):
    if action == ACTION.SHOW:
        show_summary(FLAGS.dirs)
    elif action == ACTION.NETWORK:
        create_network(FLAGS.name, FLAGS.dest, FLAGS.desc)
    elif action == ACTION.STORAGE:
        create_storage(FLAGS.name, FLAGS.dest)
    elif action == ACTION.MOVE:
        move(FLAGS.src, FLAGS.dest)
    elif action == ACTION.DELETE:
        delete(FLAGS.path)
    elif action == ACTION.STATS:
        statistics(FLAGS.name, FLAGS.regexp)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=desc)
    subparsers = parser.add_subparsers(title="Actions", description="Actions to perform", dest="action")

    show = subparsers.add_parser(ACTION.SHOW, help="Look up for network or storage and show summary.")
    show.add_argument("dirs", nargs="*", default=[], help="Network/Storage directory")

    stats = subparsers.add_parser(ACTION.STATS, 
            help="Network statistics tool")
    stats.add_argument("name", help="Network name")
    stats.add_argument("regexp", nargs="?", default=".*", 
            help="Python-like regexp for statistics name")
    stats.add_argument("-i", help="Stats file index", type=int)
    stats.add_argument("-s", "--show", action="store_true", 
            help="Show specified statistics summaries")
    stats.add_argument("-ac", "--activation_curve", metavar="pt-tresh", 
            type=float, help="Generate activation curves")
    stats.add_argument("--save", metavar="path",
            help="Directory to save generated objects.")

    network = subparsers.add_parser(ACTION.NETWORK, help="Create new network.")
    network.add_argument("name", help="Network name")
    network.add_argument("desc", help="Description Python file")
    network.add_argument("dest", help="Destination directory or storage directory")
    
    storage= subparsers.add_parser(ACTION.STORAGE, help="Create new storage.")
    storage.add_argument("name", help="Storage name")
    storage.add_argument("dest", help="Destination directory")
    
    move = subparsers.add_parser(ACTION.MOVE, help="Move network to/from storage.")
    move.add_argument("src", help="Source path")
    move.add_argument("dest", help="Destination path")
    
    delete = subparsers.add_parser(ACTION.DELETE, help="Delete network or storage.")
    delete.add_argument("path", help="Storage or network path")
    
    FLAGS, unparsed = parser.parse_known_args()
    
    if FLAGS.action is None:
        parser.print_help()
    else:
        take_action(FLAGS.action, FLAGS)
